import httpx

from lexicons.lexicon_mapping import LEXICON_MAPPING
from services.redis_service import RedisService
from services.whapi_service import WhatsAppService

from datetime import datetime, timedelta


class MessageHandler:
    def __init__(self):
        self.redis_service = RedisService()
        self.whapi_service = WhatsAppService()

    async def process_message(self, message: dict):
        number = message.get('from')
        text = message.get('text', {}).get('body', '').strip()
        if not number or not text:
            return

        state = await self.redis_service.get_user_state(number)
        if not state:
            await self.start_conversation(number)
            return
        if state.get('stage') == 'awaiting_queue_info':
            if text.isdigit():
                office_id = int(text)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ WhatsApp
                client_number = number

                async with httpx.AsyncClient() as client:
                    try:
                        response = await client.post(
                            "http://127.0.0.1:8080/queue/join",
                            json={
                                "office_id": office_id,
                                "client_number": client_number
                            }
                        )
                        if response.status_code == 201:
                            await self.whapi_service.send_request('messages/text', params={
                                "to": number,
                                "body": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å!"
                            })
                        else:
                            await self.whapi_service.send_request('messages/text', params={
                                "to": number,
                                "body": f"‚ùå –û—à–∏–±–∫–∞: {response.text}"
                            })
                    except Exception as e:
                        await self.whapi_service.send_request('messages/text', params={
                            "to": number,
                            "body": f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –æ—á–µ—Ä–µ–¥–∏: {str(e)}"
                        })

                # –ü–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é
                await self.redis_service.set_user_state(number, {"stage": "menu"})
                return
            else:
                await self.whapi_service.send_request('messages/text', params={
                    "to": number,
                    "body": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞.\n–ü—Ä–∏–º–µ—Ä:\n3"
                })
                return
        if state.get('stage') == 'awaiting_office_queue':
            if text.isdigit():
                office_id = int(text)

                async with httpx.AsyncClient() as client:
                    try:
                        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏
                        response = await client.get(
                            f"http://127.0.0.1:8080/queue/position?office_id={office_id}&phone={number}")
                        if response.status_code == 200:
                            data = response.json()
                            total_people = data.get('–æ–±—â–µ–µ –∫–æ–ª–≤–æ', 0)

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
                            if '—Å–æ–æ–±—â–µ–Ω–∏–µ' in data:
                                message = f"üë• {data['—Å–æ–æ–±—â–µ–Ω–∏–µ']}. –í –æ—á–µ—Ä–µ–¥–∏ —Å–µ–π—á–∞—Å {total_people} —á–µ–ª–æ–≤–µ–∫(–∞)."
                            else:
                                position = data.get('–ª–∏—á–Ω–æ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å', 0)
                                message = f"üë• –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position}. –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏ {total_people} —á–µ–ª–æ–≤–µ–∫(–∞)."

                            await self.whapi_service.send_request('messages/text', params={
                                "to": number,
                                "body": message
                            })
                        else:
                            await self.whapi_service.send_request('messages/text', params={
                                "to": number,
                                "body": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {response.text}"
                            })
                    except Exception as e:
                        await self.whapi_service.send_request('messages/text', params={
                            "to": number,
                            "body": f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –æ—á–µ—Ä–µ–¥–∏: {str(e)}"
                        })

                # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await self.redis_service.set_user_state(number, {"stage": "menu"})
                return
            else:
                await self.whapi_service.send_request('messages/text', params={
                    "to": number,
                    "body": "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞.\n–ü—Ä–∏–º–µ—Ä:\n3"
                })
                return

        lang = state.get('lang', 'ru')
        stage = state.get('stage')

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        if stage == 'blocked':
            blocked_until = state.get('blocked_until')
            if blocked_until:
                now = datetime.utcnow()
                unblock_time = datetime.fromisoformat(blocked_until)
                if now < unblock_time:
                    return  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –µ—â–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                else:
                    await self.redis_service.set_user_state(number, {'lang': lang, 'stage': 'menu'})
                    await self.send_menu(number, lang)
                    return

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ---
        if stage == 'choose_language':
            if text == '1':
                lang = 'kg'
            elif text == '2':
                lang = 'ru'
            else:
                await self.start_conversation(number)
                return

            await self.redis_service.set_user_state(number, {'lang': lang, 'stage': 'menu'})
            await self.send_menu(number, lang)
            return

        if text == '0':
            await self.send_menu(number, lang)
            return

        await self.handle_menu_selection(number, text, lang)

    async def start_conversation(self, number: str):
        await self.redis_service.set_user_state(number, {'stage': 'choose_language'})
        await self.whapi_service.send_request('messages/text', params={
            "to": number,
            "body": LEXICON_MAPPING['ru']['start']
        })

    async def send_menu(self, number: str, lang: str):
        lexicon = LEXICON_MAPPING.get(lang, LEXICON_MAPPING['ru'])
        await self.redis_service.update_user_state(number, 'stage', 'menu')
        await self.whapi_service.send_request('messages/text', params={
            "to": number,
            "body": lexicon['menu']
        })

    async def handle_menu_selection(self, number: str, text: str, lang: str):
        lexicon = LEXICON_MAPPING.get(lang, LEXICON_MAPPING['ru'])

        entry = lexicon.get(text)
        print(entry)
        if not entry:
            await self.send_menu(number, lang)
            return

        message_text, link = entry

        # --- –ü—É–Ω–∫—Ç "7" ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä ---
        if text == '7':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª–µ–∫—Å–∏–∫–æ–Ω–∞, –∫–∞–∫ –æ–±—ã—á–Ω–æ
            if link:
                await self.whapi_service.send_request('messages/text', params={
                    "to": number,
                    "body": f"{message_text}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {link}"
                })
            else:
                await self.whapi_service.send_request('messages/text', params={
                    "to": number,
                    "body": message_text
                })

            # –°—Ç–∞–≤–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ 2 —á–∞—Å–∞
            two_hours_later = datetime.utcnow() + timedelta(hours=2)
            await self.redis_service.set_user_state(number, {
                'lang': lang,
                'stage': 'blocked',
                'blocked_until': two_hours_later.isoformat()
            })
            return
        if text == '8':
            await self.start_join_queue_process(number)
            return
        if text == '9':
            await self.start_check_queue_process(number)
            return

        if link:
            await self.whapi_service.send_request('messages/text', params={
                "to": number,
                "body": f"{message_text}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {link}"
            })
        else:
            await self.whapi_service.send_request('messages/text', params={
                "to": number,
                "body": message_text
            })

    async def start_join_queue_process(self, number: str):
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get("http://127.0.0.1:8080/offices")
                if response.status_code == 200:
                    data = response.json()
                    offices = data.get('offices', [])

                    if not offices:
                        await self.whapi_service.send_request('messages/text', params={
                            "to": number,
                            "body": "‚ùå –û—Ñ–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        })
                        return

                    office_list_text = "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ–∏—Å—ã:\n\n"
                    for office in offices:
                        office_list_text += f"{office['ID']}: {office['Name']} ({office['Address']})\n"

                    office_list_text += "\n‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å.\n–ü—Ä–∏–º–µ—Ä:\n3"

                    await self.whapi_service.send_request('messages/text', params={
                        "to": number,
                        "body": office_list_text
                    })

                    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–¥–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –æ—Ñ–∏—Å–∞
                    await self.redis_service.set_user_state(number, {
                        "stage": "awaiting_queue_info"
                    })
                else:
                    await self.whapi_service.send_request('messages/text', params={
                        "to": number,
                        "body": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Å–æ–≤."
                    })
            except Exception as e:
                await self.whapi_service.send_request('messages/text', params={
                    "to": number,
                    "body": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤: {str(e)}"
                })

    async def start_check_queue_process(self, number: str):
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get("http://127.0.0.1:8080/offices")
                if response.status_code == 200:
                    data = response.json()
                    offices = data.get('offices', [])

                    if not offices:
                        await self.whapi_service.send_request('messages/text', params={
                            "to": number,
                            "body": "‚ùå –û—Ñ–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        })
                        return

                    office_list_text = "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏:\n\n"
                    for office in offices:
                        office_list_text += f"{office['ID']}: {office['Name']} ({office['Address']})\n"

                    office_list_text += "\n‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –æ—Ñ–∏—Å–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—á–µ—Ä–µ–¥—å.\n–ü—Ä–∏–º–µ—Ä:\n3"

                    await self.whapi_service.send_request('messages/text', params={
                        "to": number,
                        "body": office_list_text
                    })

                    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–¥–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ—Ñ–∏—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
                    await self.redis_service.set_user_state(number, {
                        "stage": "awaiting_office_queue"
                    })
                else:
                    await self.whapi_service.send_request('messages/text', params={
                        "to": number,
                        "body": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Å–æ–≤."
                    })
            except Exception as e:
                await self.whapi_service.send_request('messages/text', params={
                    "to": number,
                    "body": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤: {str(e)}"
                })